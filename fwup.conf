# Firmware configuration file for the ODYSSEY - STM32MP157C

require-fwup-version="1.7.0" # For `boot` option of gpt

#
# Firmware metadata
#

# All of these can be overriden using environment variables of the same name.
#
#  Run 'fwup -m' to query values in a .fw file.
#  Use 'fw_printenv' to query values on the target.
#
# These are used by Nerves libraries to introspect.
define(NERVES_FW_PRODUCT, "Nerves Firmware")
define(NERVES_FW_DESCRIPTION, "")
define(NERVES_FW_VERSION, "${NERVES_SDK_VERSION}")
define(NERVES_FW_PLATFORM, "stm32mp157c_odyssey")
define(NERVES_FW_ARCHITECTURE, "arm")
define(NERVES_FW_AUTHOR, "5G & Beyond with Elixir")

define(NERVES_FW_DEVPATH, "/dev/mmcblk0")
define(NERVES_FW_APPLICATION_PART0_DEVPATH, "/dev/mmcblk0p6") # Linux part number is 1-based
define(NERVES_FW_APPLICATION_PART0_FSTYPE, "f2fs")
define(NERVES_FW_APPLICATION_PART0_TARGET, "/root")
define(NERVES_PROVISIONING, "${NERVES_SYSTEM}/images/fwup_include/provisioning.conf")

# Default paths if not specified via the commandline
define(ROOTFS, "${NERVES_SYSTEM}/images/rootfs.squashfs")
define(UNAME_R, "5.10.83-armv7-lpae-x58")

# This configuration file will create an image that has an MBR and the
# following layout:
#
# +--------------------------+
# | MBR         LBA 0        |
# +--------------------------+
# | GPT header  LBA 1        |
# | GPT entries LBA 2-33     |
# +--------------------------+
# | Firmware configuration   |
# | (formatted as uboot env) |
# +--------------------------+
# | p0: FSBL 1               |
# | for u-boot-spl.stm32     |
# +--------------------------+
# | p1: FSBL 2               |
# | for u-boot-spl.stm32     |
# +--------------------------+
# | p2: SSBL for u-boot.img  |
# +--------------------------+
# | p3*: BOOT A (FAT16)      |
# | vmlinuz                  |
# | uEnv.txt                 |
# | *.dtb                    |
# +--------------------------+
# | p3*: BOOT B (FAT16)      |
# +--------------------------+
# | p4*: Rootfs A (squashfs) |
# +--------------------------+
# | p4*: Rootfs B (squashfs) |
# +--------------------------+
# | p5: Application (f2fs)   |
# +--------------------------+

define(GPT_PART_START_OFFSET, 34)

define(UBOOT_ENV_OFFSET, ${GPT_PART_START_OFFSET})
define(UBOOT_ENV_COUNT, 16) # 16 * 512 / 1024 = 8 KiB

# The First Stage Boot Loader 1
define-eval(FSBL1_PART_OFFSET, "${UBOOT_ENV_OFFSET} + ${UBOOT_ENV_COUNT}")
define(FSBL1_PART_COUNT, 512) # 512 * 512 / 1024 = 256 KiB

# The First Stage Boot Loader 2
define-eval(FSBL2_PART_OFFSET, "${FSBL1_PART_OFFSET} + ${FSBL1_PART_COUNT}")
define(FSBL2_PART_COUNT, ${FSBL1_PART_COUNT}) # same size as FSBL 1

# The Second Stage Boot Loader 2
define-eval(SSBL_PART_OFFSET, "${FSBL2_PART_OFFSET} + ${FSBL2_PART_COUNT}")
define(SSBL_PART_COUNT, 4096) # 4096 * 512 / 1024 / 1024 = 2 MiB

# The boot partition has room for a kernel, a uEnv.txt, and a dtb.
define-eval(BOOT_A_PART_OFFSET, "${SSBL_PART_OFFSET} + ${SSBL_PART_COUNT}")
define(BOOT_A_PART_COUNT, 131072) # 131072 * 512 / 1024 / 1024 = 64 MiB

define-eval(BOOT_B_PART_OFFSET, "${BOOT_A_PART_OFFSET} + ${BOOT_A_PART_COUNT}")
define(BOOT_B_PART_COUNT, ${BOOT_A_PART_COUNT}) # same size as BOOT A

# Let the rootfs have room to grow up to 128 MiB (256K 512-byte blocks)
define-eval(ROOTFS_A_PART_OFFSET, "${BOOT_B_PART_OFFSET} + ${BOOT_B_PART_COUNT}")
define(ROOTFS_A_PART_COUNT, 262144) # 262144 * 512 / 1024 / 1024 = 128 MiB

define-eval(ROOTFS_B_PART_OFFSET, "${ROOTFS_A_PART_OFFSET} + ${ROOTFS_A_PART_COUNT}")
define(ROOTFS_B_PART_COUNT, ${ROOTFS_A_PART_COUNT}) # same size as ROOTFS A

# Application partition. This partition can occupy all of the remaining space.
# Size it to fit the destination.
define-eval(APP_PART_OFFSET, "${ROOTFS_B_PART_OFFSET} + ${ROOTFS_B_PART_COUNT}")
define(APP_PART_COUNT, 1048576)

# Firmware archive metadata
meta-product = ${NERVES_FW_PRODUCT}
meta-description = ${NERVES_FW_DESCRIPTION}
meta-version = ${NERVES_FW_VERSION}
meta-platform = ${NERVES_FW_PLATFORM}
meta-architecture = ${NERVES_FW_ARCHITECTURE}
meta-author = ${NERVES_FW_AUTHOR}
meta-vcs-identifier = ${NERVES_FW_VCS_IDENTIFIER}
meta-misc = ${NERVES_FW_MISC}

# File resources are listed in the order that they are included in the .fw file
# This is important, since this is the order that they're written on a firmware
# update due to the event driven nature of the update system.
file-resource u-boot-spl.stm32.fsbl1 {
    host-path = "${NERVES_SYSTEM}/images/u-boot-spl.stm32"
}
file-resource u-boot-spl.stm32.fsbl2 {
    host-path = "${NERVES_SYSTEM}/images/u-boot-spl.stm32"
}
file-resource u-boot.img {
    host-path = "${NERVES_SYSTEM}/images/u-boot.img"
}
file-resource uEnv.txt {
    host-path = "${NERVES_SYSTEM}/images/uEnv.txt"
}
file-resource zImage {
    host-path = "${NERVES_SYSTEM}/images/zImage"
}
file-resource stm32mp157c-seeed-npi.dtb {
    host-path = "${NERVES_SYSTEM}/images/stm32mp157c-seeed-npi.dtb"
}
file-resource stm32mp1-seeed-ap6236-overlay.dtb {
    host-path = "${NERVES_SYSTEM}/images/stm32mp1-seeed-ap6236-overlay.dtb"
}
file-resource stm32mp1-seeed-spi5-overlay.dtb {
    host-path = "${NERVES_SYSTEM}/images/stm32mp1-seeed-spi5-overlay.dtb"
}
file-resource stm32mp1-seeed-usart2-overlay.dtb {
    host-path = "${NERVES_SYSTEM}/images/stm32mp1-seeed-usart2-overlay.dtb"
}
file-resource stm32mp1-seeed-i2c4-overlay.dtb {
    host-path = "${NERVES_SYSTEM}/images/stm32mp1-seeed-i2c4-overlay.dtb"
}
file-resource rootfs.img {
    host-path = ${ROOTFS}

    # Error out if the rootfs size exceeds the partition size
    assert-size-lte = ${ROOTFS_A_PART_COUNT}
}

# gpt definitions
define(ENTIRE_DISK_UUID, "691f1be3-ec37-4dd2-b695-fe9901a93d63") # generated by uuidgen
define(LINUX_FS_UUID, "0fc63daf-8483-4772-8e79-3d69d8477de4")
define(PART_0_UUID, "9ecd363c-6af5-4648-b975-5b4cebef0f68") # generated by uuidgen
define(PART_1_UUID, "f13c7240-fcdc-4b84-aecc-fd57dc6c27ed") # generated by uuidgen
define(PART_2_UUID, "3b122046-ac67-4174-8ee8-0d2e9842fad4") # generated by uuidgen
define(PART_3_UUID, "bfc7baa5-8afb-4220-b03d-88d378e16e77") # generated by uuidgen
define(PART_4_UUID, "5c58aef9-cc84-4d5e-a11f-4d18571ee5bb") # generated by uuidgen
define(PART_5_UUID, "e0a92ca3-86d3-44bb-8237-a7aea464b8c9") # generated by uuidgen
define(PART_0_NAME, "fsbl1")
define(PART_1_NAME, "fsbl2")
define(PART_2_NAME, "ssbl")
define(PART_3_NAME, "boot")
define(PART_4_NAME, "rootfs")
define(PART_5_NAME, "app")

gpt gpt-a {
    guid = ${ENTIRE_DISK_UUID}

    partition 0 {
        block-offset = ${FSBL1_PART_OFFSET}
        block-count = ${FSBL1_PART_COUNT}
        type = ${LINUX_FS_UUID}
        guid = ${PART_0_UUID}
        name = ${PART_0_NAME}
    }
    partition 1 {
        block-offset = ${FSBL2_PART_OFFSET}
        block-count = ${FSBL2_PART_COUNT}
        type = ${LINUX_FS_UUID}
        guid = ${PART_1_UUID}
        name = ${PART_1_NAME}
    }
    partition 2 {
        block-offset = ${SSBL_PART_OFFSET}
        block-count = ${SSBL_PART_COUNT}
        type = ${LINUX_FS_UUID}
        guid = ${PART_2_UUID}
        name = ${PART_2_NAME}
    }
    partition 3 {
        block-offset = ${BOOT_A_PART_OFFSET}
        block-count = ${BOOT_A_PART_COUNT}
        type = ${LINUX_FS_UUID}
        guid = ${PART_3_UUID}
        name = ${PART_3_NAME}
        boot = true
    }
    partition 4 {
        block-offset = ${ROOTFS_A_PART_OFFSET}
        block-count = ${ROOTFS_A_PART_COUNT}
        type = ${LINUX_FS_UUID}
        guid = ${PART_4_UUID}
        name = ${PART_4_NAME}
    }
    partition 5 {
        block-offset = ${APP_PART_OFFSET}
        block-count = ${APP_PART_COUNT}
        type = ${LINUX_FS_UUID}
        guid = ${PART_5_UUID}
        name = ${PART_5_NAME}
    }
}

gpt gpt-b {
    guid = ${ENTIRE_DISK_UUID}

    partition 0 {
        block-offset = ${FSBL1_PART_OFFSET}
        block-count = ${FSBL1_PART_COUNT}
        type = ${LINUX_FS_UUID}
        guid = ${PART_0_UUID}
        name = ${PART_0_NAME}
    }
    partition 1 {
        block-offset = ${FSBL2_PART_OFFSET}
        block-count = ${FSBL2_PART_COUNT}
        type = ${LINUX_FS_UUID}
        guid = ${PART_1_UUID}
        name = ${PART_1_NAME}
    }
    partition 2 {
        block-offset = ${SSBL_PART_OFFSET}
        block-count = ${SSBL_PART_COUNT}
        type = ${LINUX_FS_UUID}
        guid = ${PART_2_UUID}
        name = ${PART_2_NAME}
    }
    partition 3 {
        block-offset = ${BOOT_B_PART_OFFSET}
        block-count = ${BOOT_B_PART_COUNT}
        type = ${LINUX_FS_UUID}
        guid = ${PART_3_UUID}
        name = ${PART_3_NAME}
        boot = true
    }
    partition 4 {
        block-offset = ${ROOTFS_B_PART_OFFSET}
        block-count = ${ROOTFS_B_PART_COUNT}
        type = ${LINUX_FS_UUID}
        guid = ${PART_4_UUID}
        name = ${PART_4_NAME}
    }
    partition 5 {
        block-offset = ${APP_PART_OFFSET}
        block-count = ${APP_PART_COUNT}
        type = ${LINUX_FS_UUID}
        guid = ${PART_5_UUID}
        name = ${PART_5_NAME}
    }
}

# Location where installed firmware information is stored.
# While this is called "u-boot", u-boot isn't involved in this
# setup. It just provides a convenient key/value store format.
uboot-environment uboot-env {
    block-offset = ${UBOOT_ENV_OFFSET}
    block-count = ${UBOOT_ENV_COUNT}
}

# This firmware task writes everything to the destination media.
# This should only be run at the factory to initialize a board!
task complete {
    # Only match if not mounted
    require-unmounted-destination = true

    on-init {
        gpt_write(gpt-a)

        fat_mkfs(${BOOT_A_PART_OFFSET}, ${BOOT_A_PART_COUNT})
        fat_setlabel(${BOOT_A_PART_OFFSET}, "BOOT-A")
        fat_mkdir(${BOOT_A_PART_OFFSET}, "dtbs")
        fat_mkdir(${BOOT_A_PART_OFFSET}, "dtbs/${UNAME_R}")

        uboot_clearenv(uboot-env)

        include("${NERVES_PROVISIONING}")

        uboot_setenv(uboot-env, "nerves_fw_active", "a")
        uboot_setenv(uboot-env, "nerves_fw_devpath", ${NERVES_FW_DEVPATH})
        uboot_setenv(uboot-env, "a.nerves_fw_application_part0_devpath", ${NERVES_FW_APPLICATION_PART0_DEVPATH})
        uboot_setenv(uboot-env, "a.nerves_fw_application_part0_fstype", ${NERVES_FW_APPLICATION_PART0_FSTYPE})
        uboot_setenv(uboot-env, "a.nerves_fw_application_part0_target", ${NERVES_FW_APPLICATION_PART0_TARGET})
        uboot_setenv(uboot-env, "a.nerves_fw_product", ${NERVES_FW_PRODUCT})
        uboot_setenv(uboot-env, "a.nerves_fw_description", ${NERVES_FW_DESCRIPTION})
        uboot_setenv(uboot-env, "a.nerves_fw_version", ${NERVES_FW_VERSION})
        uboot_setenv(uboot-env, "a.nerves_fw_platform", ${NERVES_FW_PLATFORM})
        uboot_setenv(uboot-env, "a.nerves_fw_architecture", ${NERVES_FW_ARCHITECTURE})
        uboot_setenv(uboot-env, "a.nerves_fw_author", ${NERVES_FW_AUTHOR})
        uboot_setenv(uboot-env, "a.nerves_fw_vcs_identifier", ${NERVES_FW_VCS_IDENTIFIER})
        uboot_setenv(uboot-env, "a.nerves_fw_misc", ${NERVES_FW_MISC})
        uboot_setenv(uboot-env, "a.nerves_fw_uuid", "\${FWUP_META_UUID}")
    }

    on-resource u-boot-spl.stm32.fsbl1 { raw_write(${FSBL1_PART_OFFSET}) }
    on-resource u-boot-spl.stm32.fsbl2 { raw_write(${FSBL2_PART_OFFSET}) }
    on-resource u-boot.img { raw_write(${SSBL_PART_OFFSET}) }
    on-resource uEnv.txt { fat_write(${BOOT_A_PART_OFFSET}, "uEnv.txt") }
    on-resource zImage { fat_write(${BOOT_A_PART_OFFSET}, "vmlinuz-${UNAME_R}") }
    on-resource stm32mp157c-seeed-npi.dtb         { fat_write(${BOOT_A_PART_OFFSET}, "dtbs/${UNAME_R}/stm32mp157c-seeed-npi.dtb") }
    on-resource stm32mp1-seeed-ap6236-overlay.dtb { fat_write(${BOOT_A_PART_OFFSET}, "dtbs/${UNAME_R}/stm32mp1-seeed-ap6236-overlay.dtb") }
    on-resource stm32mp1-seeed-spi5-overlay.dtb   { fat_write(${BOOT_A_PART_OFFSET}, "dtbs/${UNAME_R}/stm32mp1-seeed-spi5-overlay.dtb") }
    on-resource stm32mp1-seeed-usart2-overlay.dtb { fat_write(${BOOT_A_PART_OFFSET}, "dtbs/${UNAME_R}/stm32mp1-seeed-usart2-overlay.dtb") }
    on-resource stm32mp1-seeed-i2c4-overlay.dtb   { fat_write(${BOOT_A_PART_OFFSET}, "dtbs/${UNAME_R}/stm32mp1-seeed-i2c4-overlay.dtb") }
    on-resource rootfs.img {
        # write to the first rootfs partition
        raw_write(${ROOTFS_A_PART_OFFSET})
    }

    on-finish {
        # Clear out any old data in the B partition that might be mistaken for
        # a file system. This is mostly to avoid confusion in humans when
        # reprogramming SDCards with unknown contents.
        raw_memset(${BOOT_B_PART_OFFSET}, 256, 0xff)
        raw_memset(${ROOTFS_B_PART_OFFSET}, 256, 0xff)

        # Invalidate the application data partition so that it is guaranteed to
        # trigger the corrupt filesystem detection code on first boot and get
        # formatted. If this isn't done and an old SDCard is reused, the
        # application data could be in a weird state.
        raw_memset(${APP_PART_OFFSET}, 256, 0xff)
    }
}

task upgrade.a {
    # This task upgrades the A partition
    # require-partition-offset(4, ${ROOTFS_B_PART_OFFSET}) # not supported for gpt
    require-uboot-variable(uboot-env, "nerves_fw_active", "b")

    # Verify the expected platform/architecture
    require-uboot-variable(uboot-env, "b.nerves_fw_platform", "${NERVES_FW_PLATFORM}")
    require-uboot-variable(uboot-env, "b.nerves_fw_architecture", "${NERVES_FW_ARCHITECTURE}")

    on-init {
        info("Upgrading partition A")

        # Clear some firmware information just in case this update gets
        # interrupted midway. If this partition was bootable, it's not going to
        # be soon.
        uboot_unsetenv(uboot-env, "a.nerves_fw_version")
        uboot_unsetenv(uboot-env, "a.nerves_fw_platform")
        uboot_unsetenv(uboot-env, "a.nerves_fw_architecture")
        uboot_unsetenv(uboot-env, "a.nerves_fw_uuid")

        # Reset the previous contents of the A boot partition
        fat_mkfs(${BOOT_A_PART_OFFSET}, ${BOOT_A_PART_COUNT})
        fat_setlabel(${BOOT_A_PART_OFFSET}, "BOOT-A")
        fat_mkdir(${BOOT_A_PART_OFFSET}, "dtbs")
        fat_mkdir(${BOOT_A_PART_OFFSET}, "dtbs/${UNAME_R}")

        # Indicate that the entire partition can be cleared
        trim(${ROOTFS_A_PART_OFFSET}, ${ROOTFS_A_PART_COUNT})
    }

    # Write the new boot partition files and rootfs. The MBR still points
    # to the B partition, so an error or power failure during this part
    # won't hurt anything.
    on-resource u-boot-spl.stm32.fsbl1 { raw_write(${FSBL1_PART_OFFSET}) }
    on-resource u-boot-spl.stm32.fsbl2 { raw_write(${FSBL2_PART_OFFSET}) }
    on-resource u-boot.img { raw_write(${SSBL_PART_OFFSET}) }
    on-resource uEnv.txt { fat_write(${BOOT_A_PART_OFFSET}, "uEnv.txt") }
    on-resource zImage { fat_write(${BOOT_A_PART_OFFSET}, "vmlinuz-${UNAME_R}") }
    on-resource stm32mp157c-seeed-npi.dtb         { fat_write(${BOOT_A_PART_OFFSET}, "dtbs/${UNAME_R}/stm32mp157c-seeed-npi.dtb") }
    on-resource stm32mp1-seeed-ap6236-overlay.dtb { fat_write(${BOOT_A_PART_OFFSET}, "dtbs/${UNAME_R}/stm32mp1-seeed-ap6236-overlay.dtb") }
    on-resource stm32mp1-seeed-spi5-overlay.dtb   { fat_write(${BOOT_A_PART_OFFSET}, "dtbs/${UNAME_R}/stm32mp1-seeed-spi5-overlay.dtb") }
    on-resource stm32mp1-seeed-usart2-overlay.dtb { fat_write(${BOOT_A_PART_OFFSET}, "dtbs/${UNAME_R}/stm32mp1-seeed-usart2-overlay.dtb") }
    on-resource stm32mp1-seeed-i2c4-overlay.dtb   { fat_write(${BOOT_A_PART_OFFSET}, "dtbs/${UNAME_R}/stm32mp1-seeed-i2c4-overlay.dtb") }
    on-resource rootfs.img {
        delta-source-raw-offset=${ROOTFS_B_PART_OFFSET}
        delta-source-raw-count=${ROOTFS_B_PART_COUNT}
        raw_write(${ROOTFS_A_PART_OFFSET})
    }

    on-finish {
        # Update firmware metadata
        uboot_setenv(uboot-env, "a.nerves_fw_application_part0_devpath", ${NERVES_FW_APPLICATION_PART0_DEVPATH})
        uboot_setenv(uboot-env, "a.nerves_fw_application_part0_fstype", ${NERVES_FW_APPLICATION_PART0_FSTYPE})
        uboot_setenv(uboot-env, "a.nerves_fw_application_part0_target", ${NERVES_FW_APPLICATION_PART0_TARGET})
        uboot_setenv(uboot-env, "a.nerves_fw_product", ${NERVES_FW_PRODUCT})
        uboot_setenv(uboot-env, "a.nerves_fw_description", ${NERVES_FW_DESCRIPTION})
        uboot_setenv(uboot-env, "a.nerves_fw_version", ${NERVES_FW_VERSION})
        uboot_setenv(uboot-env, "a.nerves_fw_platform", ${NERVES_FW_PLATFORM})
        uboot_setenv(uboot-env, "a.nerves_fw_architecture", ${NERVES_FW_ARCHITECTURE})
        uboot_setenv(uboot-env, "a.nerves_fw_author", ${NERVES_FW_AUTHOR})
        uboot_setenv(uboot-env, "a.nerves_fw_vcs_identifier", ${NERVES_FW_VCS_IDENTIFIER})
        uboot_setenv(uboot-env, "a.nerves_fw_misc", ${NERVES_FW_MISC})
        uboot_setenv(uboot-env, "a.nerves_fw_uuid", "\${FWUP_META_UUID}")

        # Switch over to boot the new firmware
        uboot_setenv(uboot-env, "nerves_fw_active", "a")
        gpt_write(gpt-a)
    }

    on-error {
    }
}

task upgrade.b {
    # This task upgrades the B partition
    # require-partition-offset(4, ${ROOTFS_A_PART_OFFSET}) # not supported for gpt
    require-uboot-variable(uboot-env, "nerves_fw_active", "a")

    # Verify the expected platform/architecture
    require-uboot-variable(uboot-env, "a.nerves_fw_platform", "${NERVES_FW_PLATFORM}")
    require-uboot-variable(uboot-env, "a.nerves_fw_architecture", "${NERVES_FW_ARCHITECTURE}")

    on-init {
        info("Upgrading partition B")

        # Clear some firmware information just in case this update gets
        # interrupted midway.
        uboot_unsetenv(uboot-env, "b.nerves_fw_version")
        uboot_unsetenv(uboot-env, "b.nerves_fw_platform")
        uboot_unsetenv(uboot-env, "b.nerves_fw_architecture")
        uboot_unsetenv(uboot-env, "b.nerves_fw_uuid")

        # Reset the previous contents of the B boot partition
        fat_mkfs(${BOOT_B_PART_OFFSET}, ${BOOT_B_PART_COUNT})
        fat_setlabel(${BOOT_B_PART_OFFSET}, "BOOT-B")
        fat_mkdir(${BOOT_B_PART_OFFSET}, "dtbs")
        fat_mkdir(${BOOT_B_PART_OFFSET}, "dtbs/${UNAME_R}")

        # Indicate that the entire partition can be cleared
        trim(${ROOTFS_B_PART_OFFSET}, ${ROOTFS_B_PART_COUNT})
    }

    # Write the new boot partition files and rootfs. The MBR still points
    # to the A partition, so an error or power failure during this part
    # won't hurt anything.
    on-resource u-boot-spl.stm32.fsbl1 { raw_write(${FSBL1_PART_OFFSET}) }
    on-resource u-boot-spl.stm32.fsbl2 { raw_write(${FSBL2_PART_OFFSET}) }
    on-resource u-boot.img { raw_write(${SSBL_PART_OFFSET}) }
    on-resource uEnv.txt { fat_write(${BOOT_B_PART_OFFSET}, "uEnv.txt") }
    on-resource zImage { fat_write(${BOOT_B_PART_OFFSET}, "vmlinuz-${UNAME_R}") }
    on-resource stm32mp157c-seeed-npi.dtb         { fat_write(${BOOT_B_PART_OFFSET}, "dtbs/${UNAME_R}/stm32mp157c-seeed-npi.dtb") }
    on-resource stm32mp1-seeed-ap6236-overlay.dtb { fat_write(${BOOT_B_PART_OFFSET}, "dtbs/${UNAME_R}/stm32mp1-seeed-ap6236-overlay.dtb") }
    on-resource stm32mp1-seeed-spi5-overlay.dtb   { fat_write(${BOOT_B_PART_OFFSET}, "dtbs/${UNAME_R}/stm32mp1-seeed-spi5-overlay.dtb") }
    on-resource stm32mp1-seeed-usart2-overlay.dtb { fat_write(${BOOT_B_PART_OFFSET}, "dtbs/${UNAME_R}/stm32mp1-seeed-usart2-overlay.dtb") }
    on-resource stm32mp1-seeed-i2c4-overlay.dtb   { fat_write(${BOOT_B_PART_OFFSET}, "dtbs/${UNAME_R}/stm32mp1-seeed-i2c4-overlay.dtb") }
    on-resource rootfs.img {
        delta-source-raw-offset=${ROOTFS_A_PART_OFFSET}
        delta-source-raw-count=${ROOTFS_A_PART_COUNT}
        raw_write(${ROOTFS_B_PART_OFFSET})
    }

    on-finish {
        # Update firmware metadata
        uboot_setenv(uboot-env, "b.nerves_fw_application_part0_devpath", ${NERVES_FW_APPLICATION_PART0_DEVPATH})
        uboot_setenv(uboot-env, "b.nerves_fw_application_part0_fstype", ${NERVES_FW_APPLICATION_PART0_FSTYPE})
        uboot_setenv(uboot-env, "b.nerves_fw_application_part0_target", ${NERVES_FW_APPLICATION_PART0_TARGET})
        uboot_setenv(uboot-env, "b.nerves_fw_product", ${NERVES_FW_PRODUCT})
        uboot_setenv(uboot-env, "b.nerves_fw_description", ${NERVES_FW_DESCRIPTION})
        uboot_setenv(uboot-env, "b.nerves_fw_version", ${NERVES_FW_VERSION})
        uboot_setenv(uboot-env, "b.nerves_fw_platform", ${NERVES_FW_PLATFORM})
        uboot_setenv(uboot-env, "b.nerves_fw_architecture", ${NERVES_FW_ARCHITECTURE})
        uboot_setenv(uboot-env, "b.nerves_fw_author", ${NERVES_FW_AUTHOR})
        uboot_setenv(uboot-env, "b.nerves_fw_vcs_identifier", ${NERVES_FW_VCS_IDENTIFIER})
        uboot_setenv(uboot-env, "b.nerves_fw_misc", ${NERVES_FW_MISC})
        uboot_setenv(uboot-env, "b.nerves_fw_uuid", "\${FWUP_META_UUID}")

        # Switch over to boot the new firmware
        uboot_setenv(uboot-env, "nerves_fw_active", "b")
        gpt_write(gpt-b)
    }

    on-error {
    }
}

task upgrade.unexpected {
    require-uboot-variable(uboot-env, "a.nerves_fw_platform", "${NERVES_FW_PLATFORM}")
    require-uboot-variable(uboot-env, "a.nerves_fw_architecture", "${NERVES_FW_ARCHITECTURE}")
    on-init {
        error("Please check the media being upgraded. It doesn't look like either the A or B partitions are active.")
    }
}

task upgrade.wrongplatform {
    on-init {
        error("Expecting platform=${NERVES_FW_PLATFORM} and architecture=${NERVES_FW_ARCHITECTURE}")
    }
}

task provision {
    require-uboot-variable(uboot-env, "a.nerves_fw_platform", "${NERVES_FW_PLATFORM}")
    require-uboot-variable(uboot-env, "a.nerves_fw_architecture", "${NERVES_FW_ARCHITECTURE}")
    on-init {
        include("${NERVES_PROVISIONING}")
    }
}
task provision.wrongplatform {
    on-init {
        error("Expecting platform=${NERVES_FW_PLATFORM} and architecture=${NERVES_FW_ARCHITECTURE}")
    }
}
